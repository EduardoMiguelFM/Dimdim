#!/bin/bash

# =====================================================
# Script para deploy da DimDim API no Azure
# Disciplina: Cloud Computing - FIAP
# =====================================================

# Configura√ß√µes (ajuste conforme necess√°rio)
RESOURCE_GROUP="rg-dimdim-fiap"
APP_NAME="dimdim-api"
LOCATION="Brazil South"

echo "üöÄ Iniciando deploy da DimDim API no Azure..."

# Verificar se est√° logado no Azure
echo "üìã Verificando login no Azure..."
if ! az account show &> /dev/null; then
    echo "‚ùå N√£o est√° logado no Azure. Execute 'az login' primeiro."
    exit 1
fi

echo "‚úÖ Logado no Azure como: $(az account show --query user.name -o tsv)"

# Verificar se a Web App existe
echo "üîç Verificando se a Web App existe..."
if ! az webapp show --name $APP_NAME --resource-group $RESOURCE_GROUP &> /dev/null; then
    echo "‚ùå Web App '$APP_NAME' n√£o encontrada no Resource Group '$RESOURCE_GROUP'"
    echo "üí° Execute primeiro o script: ./scripts/create-resources.sh"
    exit 1
fi

echo "‚úÖ Web App encontrada!"

# Parar a aplica√ß√£o antes do deploy
echo "‚èπÔ∏è Parando a aplica√ß√£o..."
az webapp stop --name $APP_NAME --resource-group $RESOURCE_GROUP

# Build da aplica√ß√£o
echo "üî® Fazendo build da aplica√ß√£o..."
if ! ./gradlew clean build; then
    echo "‚ùå Erro no build da aplica√ß√£o"
    exit 1
fi

echo "‚úÖ Build conclu√≠do com sucesso!"

# Verificar se o JAR foi gerado
JAR_FILE="build/libs/ApiJava-0.0.1-SNAPSHOT.jar"
if [ ! -f "$JAR_FILE" ]; then
    echo "‚ùå JAR n√£o encontrado em: $JAR_FILE"
    exit 1
fi

echo "‚úÖ JAR encontrado: $JAR_FILE"

# Fazer backup da vers√£o anterior (opcional)
echo "üíæ Fazendo backup da vers√£o anterior..."
BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
mkdir -p $BACKUP_DIR

# Deploy usando Azure CLI
echo "üì¶ Fazendo deploy da aplica√ß√£o..."
az webapp deployment source config-zip \
    --name $APP_NAME \
    --resource-group $RESOURCE_GROUP \
    --src $JAR_FILE

if [ $? -eq 0 ]; then
    echo "‚úÖ Deploy realizado com sucesso!"
else
    echo "‚ùå Erro no deploy"
    exit 1
fi

# Iniciar a aplica√ß√£o
echo "‚ñ∂Ô∏è Iniciando a aplica√ß√£o..."
az webapp start --name $APP_NAME --resource-group $RESOURCE_GROUP

# Aguardar a aplica√ß√£o inicializar
echo "‚è≥ Aguardando aplica√ß√£o inicializar..."
sleep 30

# Verificar status da aplica√ß√£o
echo "üîç Verificando status da aplica√ß√£o..."
az webapp show --name $APP_NAME --resource-group $RESOURCE_GROUP --query state -o tsv

# Obter URL da aplica√ß√£o
WEBAPP_URL=$(az webapp show \
    --name $APP_NAME \
    --resource-group $RESOURCE_GROUP \
    --query defaultHostName -o tsv)

echo ""
echo "üéâ DEPLOY CONCLU√çDO COM SUCESSO!"
echo "=================================="
echo "üåê URL da aplica√ß√£o: https://$WEBAPP_URL"
echo ""
echo "üß™ Testando endpoints principais..."

# Testar endpoint de health check (se existir)
echo "üîç Testando conectividade..."
if curl -f -s "https://$WEBAPP_URL/api/usuarios" > /dev/null; then
    echo "‚úÖ API respondendo corretamente!"
else
    echo "‚ö†Ô∏è API pode estar ainda inicializando. Aguarde alguns minutos."
fi

echo ""
echo "üìã Endpoints dispon√≠veis:"
echo "   GET  https://$WEBAPP_URL/api/usuarios"
echo "   POST https://$WEBAPP_URL/api/usuarios"
echo "   GET  https://$WEBAPP_URL/api/transacoes"
echo "   POST https://$WEBAPP_URL/api/transacoes"
echo ""
echo "üìä Monitoramento:"
echo "   - Acesse o portal Azure para ver logs da aplica√ß√£o"
echo "   - Application Insights para m√©tricas detalhadas"
echo "   - Logs em tempo real: az webapp log tail --name $APP_NAME --resource-group $RESOURCE_GROUP"
echo ""

# Opcional: Executar testes b√°sicos
echo "üß™ Executando testes b√°sicos..."
echo "Testando GET /api/usuarios..."
curl -s "https://$WEBAPP_URL/api/usuarios" | head -c 100
echo "..."

echo ""
echo "‚úÖ Deploy finalizado! A aplica√ß√£o est√° dispon√≠vel em:"
echo "üîó https://$WEBAPP_URL"
